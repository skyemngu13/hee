repeat task.wait() until game:IsLoaded() and game.Players.LocalPlayer and workspace:FindFirstChild("__Extra") and workspace:FindFirstChild("__Main")

local CoreGui = game:GetService("CoreGui")
for _, gui in ipairs(CoreGui:GetChildren()) do
    if gui.Name == "Rayfield" or gui.Name == "FPSPingDisplay" or gui.Name == "ImageButtonGUI" then
        gui:Destroy()
    end
end

-- Bypass anti-teleport tr∆∞·ªõc khi load UI
local replicated = game:GetService("ReplicatedStorage")
local success, extraFunctionsModule = pcall(function()
    return require(replicated:WaitForChild("SharedModules"):WaitForChild("ExtraFunctions"))
end)

if success and extraFunctionsModule then
    local extraFunctions = extraFunctionsModule

    if not getgenv()._original_GetPlayerSpeed then
        getgenv()._original_GetPlayerSpeed = extraFunctions.GetPlayerSpeed

        extraFunctions.GetPlayerSpeed = function(player)
            return 9999999
        end
    end
end

-- Load Rayfield
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local Window = Rayfield:CreateWindow({
    Name = "P·ªãa Hub - V√£i P·ªãa üí©",
    LoadingTitle = "ƒêang t·∫£i GUI...",
    LoadingSubtitle = "V√£i P·ªãa",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "PiaHubConfig",
        FileName = "Settings"
    },
    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = false
    },
    KeySystem = false,
    KeySettings = {
        Title = "P·ªãa Hub",
        Subtitle = "Kh√¥ng c·∫ßn nh·∫≠p key",
        Note = "Free for all!",
        FileName = "PiaHubKey",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = "piahub123"
    }
})

local HttpService = game:GetService("HttpService")
local settingsFile = "piahubv2.json"
local settings = {}

-- ƒê·ªçc file config
pcall(function()
    if isfile(settingsFile) then
        settings = HttpService:JSONDecode(readfile(settingsFile))
    end
end)

-- Thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu
local defaultSettings = {
    AutoFarm = false,
    FarmScales = {"Normal", "Big"},
    FarmDelay = 0.2,
    AutoDestroy = false,
    AriseModels = {"Jinwoo", "Pucci", "Freeza"},
    AutoCastleCustom = false,
    CastleTargetFloor = "30",
    AutoCastleBossOut = false,
    AutoCastleBossFloor = 30,
    AutoBypassDungeon = false,
    AutoCheckDD = false,
    AutoClick = false,
    AutoAttack = false,
    AutoLoadScript = false,
    BypassCooldown = false,
    SpecialScript = false,
    AutoHideUI = false,
    AutoSendPetFast = false,
    AutoCastleCheckpoint = false,
    SelectedCheckpoint = "Room_25",
}

for key, value in pairs(defaultSettings) do
    if settings[key] == nil then
        settings[key] = value
    end
end

-- H√†m l∆∞u settings
local function saveSettings()
    writefile(settingsFile, HttpService:JSONEncode(settings))
end

-- Tabs
local MainTab = Window:CreateTab("Main", 124598949660449)
local DungeonTab = Window:CreateTab("Dungeon", 106229124186030)
local MiscTab = Window:CreateTab("Misc", 95758233681936)
local ShopTab = Window:CreateTab("Shop", 126309628188296)
local TeleportTab = Window:CreateTab("Teleport", 136059427982959)

MiscTab:CreateToggle({
    Name = "Auto Hide UI",
    CurrentValue = settings["AutoHideUI"],
    Flag = "AutoHideUI",
    Callback = function(val)
        settings["AutoHideUI"] = val
        saveSettings()
    end
})

-- T·ª± ƒë·ªông ·∫©n UI sau khi load GUI
task.delay(0.2, function()
    if settings["AutoHideUI"] then
        local vu = game:GetService("VirtualInputManager")
        vu:SendKeyEvent(true, Enum.KeyCode.K, false, game)
        vu:SendKeyEvent(false, Enum.KeyCode.K, false, game)
    end
end)

MainTab:CreateToggle({
    Name = "Auto Send Pet Fast (new)",
    CurrentValue = settings["AutoSendPetFast"],
    Flag = "AutoSendPetFast",
    Callback = function(val)
        settings["AutoSendPetFast"] = val
        saveSettings()
    end
})

task.spawn(function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local PetsController = require(ReplicatedStorage:WaitForChild("SharedModules"):WaitForChild("Pets"):WaitForChild("PetsController"))

    repeat task.wait() until LocalPlayer.Character and LocalPlayer.Character.PrimaryPart

    -- H√†m t√¨m qu√°i g·∫ßn nh·∫•t c√≤n s·ªëng
    local function getNearestEnemy()
        local myPos = LocalPlayer.Character.PrimaryPart.Position
        local nearest, minDist = nil, math.huge

        for _, clientEnemy in ipairs(workspace.__Main.__Enemies.Client:GetChildren()) do
            local serverEnemy = workspace.__Main.__Enemies.Server:FindFirstChild(clientEnemy.Name, true)
            if serverEnemy and not serverEnemy:GetAttribute("Dead") and (serverEnemy:GetAttribute("HP") or 1) > 0 then
                local dist = (clientEnemy.PrimaryPart.Position - myPos).Magnitude
                if dist < minDist then
                    nearest = clientEnemy
                    minDist = dist
                end
            end
        end

        return nearest
    end

    while true do
        if settings["AutoSendPetFast"] then
            local target = getNearestEnemy()
            if target then
                pcall(function()
                    PetsController.AutoEnemy(target)
                end)
            end
        end
        task.wait(0.05)
    end
end)

MainTab:CreateLabel("Auto Farm all mode")

--  Toggle Auto Farm
MainTab:CreateToggle({
    Name = " Auto Farm",
    CurrentValue = settings["AutoFarm"],
    Flag = "AutoFarm",
    Callback = function(val)
        settings["AutoFarm"] = val
        saveSettings()
    end
})

MainTab:CreateDropdown({
    Name = " Ch·ªçn lo·∫°i qu√°i",
    Options = {"All", "Normal", "Big", "ƒê√°nh Boss tr∆∞·ªõc"},
    MultiSelection = true,
    CurrentOption = settings["FarmScales"],
    Flag = "FarmScales",
    Callback = function(val)
        settings["FarmScales"] = val
        saveSettings()
    end
})

--  Textbox delay sau khi ti√™u di·ªát
local delayInput = MainTab:CreateInput({
    Name = " Delay sau khi ti√™u di·ªát",
    PlaceholderText = "0.2",
    RemoveTextAfterFocusLost = false,
    Default = tostring(settings["FarmDelay"]),
    Callback = function(val)
        local num = tonumber(val)
        if num and num > 0 then
            settings["FarmDelay"] = num
            saveSettings()
        else
            warn("Delay kh√¥ng h·ª£p l·ªá:", val)
        end
    end
})

-- G√°n l·∫°i gi√° tr·ªã r√µ r√†ng sau khi UI t·∫°o xong
task.delay(0.1, function()
    delayInput:Set(tostring(settings["FarmDelay"]))
end)

-- Auto Farm logic
task.spawn(function()
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")

    local enemiesRoot = workspace:WaitForChild("__Main"):WaitForChild("__Enemies")
    local enemiesServer = enemiesRoot:WaitForChild("Server")
    local enemiesClient = enemiesRoot:WaitForChild("Client")

    local scaleMap = {
        ["Normal"] = 1,
        ["Big"] = 2
    }

    -- Ki·ªÉm tra mob c√≥ n·∫±m trong danh s√°ch ƒë∆∞·ª£c ch·ªçn kh√¥ng
    local function isScaleAllowed(scale)
    local selected = settings["FarmScales"] or {}

    -- N·∫øu ch·ªçn "All" ‚Üí lu√¥n cho ph√©p
    if table.find(selected, "All") then return true end

    -- N·∫øu ch·ªâ ch·ªçn "ƒê√°nh Boss tr∆∞·ªõc" ‚Üí v·∫´n farm scale >= 1
    if table.find(selected, "ƒê√°nh Boss tr∆∞·ªõc") then
        return scale >= 1
    end

    -- Ki·ªÉm tra b√¨nh th∆∞·ªùng
    local roundedScale = math.floor((scale or 0) + 0.01)
    local scaleMap = {
        ["Normal"] = 1,
        ["Big"] = 2
    }

    for _, name in ipairs(selected) do
        if scaleMap[name] == roundedScale then
            return true
        end
    end

    return false
end

    -- T√¨m mob g·∫ßn nh·∫•t, ∆∞u ti√™n Boss n·∫øu c√≥ "ƒê√°nh Boss tr∆∞·ªõc"
    local function findNearestMob()
        local nearestNormal, nearestBoss
        local minNormalDist, minBossDist = math.huge, math.huge
        local selected = settings["FarmScales"] or {}

        local function check(uuidPart)
            local hp = uuidPart:GetAttribute("HP")
            local scale = uuidPart:GetAttribute("Scale")
            if not hp or hp <= 0 or not scale then return end
            if not isScaleAllowed(scale) then return end

            local uuid = uuidPart.Name
            local clientModel = enemiesClient:FindFirstChild(uuid, true)

            local pos = uuidPart.Position
            if clientModel and clientModel:IsA("Model") and clientModel:FindFirstChild("HumanoidRootPart") then
                pos = clientModel.HumanoidRootPart.Position
            end

            local dist = (pos - rootPart.Position).Magnitude
            local isBoss = scale >= 2

            if isBoss and table.find(selected, "ƒê√°nh Boss tr∆∞·ªõc") then
                if dist < minBossDist then
                    minBossDist = dist
                    nearestBoss = {model = clientModel, part = uuidPart}
                end
            elseif dist < minNormalDist then
                minNormalDist = dist
                nearestNormal = {model = clientModel, part = uuidPart}
            end
        end

        for _, child in ipairs(enemiesServer:GetChildren()) do
            if child:IsA("Folder") then
                for _, uuidPart in ipairs(child:GetChildren()) do
                    if uuidPart:IsA("Part") then
                        check(uuidPart)
                    end
                end
            elseif child:IsA("Part") then
                check(child)
            end
        end

        if nearestBoss then
            return nearestBoss.model, nearestBoss.part
        elseif nearestNormal then
            return nearestNormal.model, nearestNormal.part
        else
            return nil, nil
        end
    end

    local function teleportNearMob(pos)
        if typeof(pos) ~= "Vector3" then return end
        local dirVector = (rootPart.Position - pos)
        if dirVector.Magnitude == 0 then return end

        local success, direction = pcall(function()
            return dirVector.Unit
        end)
        if not success then return end

        local offset = direction * 5 + Vector3.new(0, 3, 0)
        rootPart.CFrame = CFrame.new(pos + offset, pos)
    end

    local function handleMob(model, part)
        if not part then return end

        local function getTargetPosition()
            if model and model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") then
                return model.HumanoidRootPart.Position
            elseif part:IsA("Part") then
                return part.Position
            end
            return nil
        end

        while settings["AutoFarm"] and part:IsDescendantOf(workspace) and (part:GetAttribute("HP") or 0) > 0 do
            local targetPos = getTargetPosition()
            if targetPos then
                local dist = (targetPos - rootPart.Position).Magnitude
                if dist > 7 then
                    teleportNearMob(targetPos)
                end
            end
            task.wait(0.1)
        end

        task.wait(settings["FarmDelay"] or 0.2)
    end

    -- V√≤ng l·∫∑p ch√≠nh
    while true do
        if settings["AutoFarm"] then
            local model, part = findNearestMob()
            if part then
                handleMob(model, part)
            else
                task.wait(0.2)
            end
        else
            task.wait(0.2)
        end
    end
end)
-- ‚öô C√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh

local autoDestroy = settings["AutoDestroy"]
local selectedModels = settings["AriseModels"]

--  Danh s√°ch t·∫•t c·∫£ model c√≥ th·ªÉ ch·ªçn
local allModels = {"JinWoo", "Pucci", "Metus", "Freeza", "Esil", "Baran", "Vulcan"}  -- b·∫°n c√≥ th·ªÉ th√™m t√πy √Ω

-- üó° Toggle: Auto Destroy
MainTab:CreateToggle({
    Name = " Auto Destroy",
    CurrentValue = autoDestroy,
    Flag = "AutoDestroy",
    Callback = function(val)
        autoDestroy = val
        settings["AutoDestroy"] = val
        saveSettings()
    end
})

MainTab:CreateDropdown({
	Name = " Ch·ªçn Model ƒë·ªÉ Arise",
	Options = {"JinWoo", "Pucci", "Metus", "Freeza", "Esil", "Baran", "Vulcan"},
	CurrentOption = settings["AriseModels"] or {},
	MultipleOptions = true, -- B·∫≠t multi-select
	Flag = "AriseModels",
	Callback = function(optionList)
		settings["AriseModels"] = optionList
		saveSettings()
	end
})

--  X·ª≠ l√Ω Auto Destroy/Arise
task.spawn(function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Workspace = game:GetService("Workspace")
    local Players = game:GetService("Players")

    local player = Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart")

    local enemiesRoot = Workspace:WaitForChild("__Main"):WaitForChild("__Enemies")
    local enemiesServer = enemiesRoot:WaitForChild("Server")
    local enemiesClient = enemiesRoot:WaitForChild("Client")

    local remote = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")

    -- H√†m t√¨m mob g·∫ßn nh·∫•t, k·∫øt h·ª£p Server v√† Client ƒë·ªÉ l·∫•y UUID ch√≠nh x√°c
    local function getNearestMob()
        local nearestPart, nearestModel, minDist = nil, nil, math.huge

        local function check(uuidPart)
            local uuid = uuidPart.Name
            local hp = uuidPart:GetAttribute("HP")
            local scale = uuidPart:GetAttribute("Scale")

            if not hp or hp > 0 then return end -- ch·ªâ x·ª≠ l√Ω mob ƒë√£ ch·∫øt

            local model = enemiesClient:FindFirstChild(uuid, true)
            if model and model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") then
                local dist = (model.HumanoidRootPart.Position - hrp.Position).Magnitude
                if dist < minDist then
                    minDist = dist
                    nearestPart = uuidPart
                    nearestModel = model
                end
            end
        end

        -- Duy·ªát h·∫øt t·ª´ Server
        for _, child in pairs(enemiesServer:GetChildren()) do
            if child:IsA("Folder") then
                for _, uuidPart in pairs(child:GetChildren()) do
                    if uuidPart:IsA("Part") then
                        check(uuidPart)
                    end
                end
            elseif child:IsA("Part") then
                check(child)
            end
        end

        return nearestPart, nearestModel
    end

    -- X·ª≠ l√Ω Arise ho·∫∑c Destroy
    local function handleMob()
    local mobPart, mobModel = getNearestMob()
    if not mobPart or not mobModel then return end

    local uuid = mobPart.Name
    local modelName = mobPart:GetAttribute("Model")

    local eventType = "EnemyDestroy"
    if table.find(settings["AriseModels"] or {}, modelName) then
        eventType = "EnemyCapture"
    end

    for _ = 1, 4 do
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = eventType,
                    ["Enemy"] = uuid
                },
                [2] = "\4"
            }
        }
        remote:FireServer(unpack(args))
        task.wait(0.1)
    end
end

    while true do
        if autoDestroy then
            pcall(handleMob)
        end
        task.wait(0.2)
    end
end)

DungeonTab:CreateLabel("Auto farm Dungeon")

-- üõ°Auto Bypass Dungeon Toggle 
DungeonTab:CreateToggle({
    Name = "Auto Bypass Dungeon",
    CurrentValue = settings["AutoBypassDungeon"],
    Flag = "AutoBypassDungeon",
    Callback = function(val)
        settings["AutoBypassDungeon"] = val
        saveSettings()
    end
})

-- uto Check DD Toggle (·ªü d∆∞·ªõi)
DungeonTab:CreateToggle({
    Name = "Auto Check DD (fix)",
    CurrentValue = settings["AutoCheckDD"],
    Flag = "AutoCheckDD",
    Callback = function(val)
        settings["AutoCheckDD"] = val
        saveSettings()
        end
})

--  H√†m t·∫°o Dungeon
local function createAndStartDungeon()
    local bridge = game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")

    local args1 = {
        [1] = {
            [1] = {["Type"] = "Gems", ["Event"] = "DungeonAction", ["Action"] = "BuyTicket"},
            [2] = "\n"
        }
    }
    bridge:FireServer(unpack(args1))
    wait(1)

    local args2 = {
        [1] = {
            [1] = {["Event"] = "DungeonAction", ["Action"] = "Create"},
            [2] = "\n"
        }
    }
    bridge:FireServer(unpack(args2))
    wait(1)

    local args3 = {
        [1] = {
            [1] = {["Dungeon"] = 876403839, ["Event"] = "DungeonAction", ["Action"] = "Start"},
            [2] = "\n"
        }
    }
    bridge:FireServer(unpack(args3))
end

--  Lu·ªìng x·ª≠ l√Ω Auto Dungeon (cho c·∫£ hai toggle)
task.spawn(function()
    local lastText = ""
    local waitFor12s = false
    local isDoubleDungeonCheck = false
    local hasDoubleDungeonHappened = false

    while true do
        if not settings["AutoBypassDungeon"] and not settings["AutoCheckDD"] then
            task.wait(1)
        else
            if game.PlaceId == 87039211657390 then
                if settings["AutoBypassDungeon"] then
                    task.wait(3)
                    createAndStartDungeon()
                end
            else
                local player = game.Players.LocalPlayer
                local infoGui = player:WaitForChild("PlayerGui"):WaitForChild("Hud"):FindFirstChild("UpContanier")
                local dungeonInfo = infoGui and infoGui:FindFirstChild("DungeonInfo")

                if dungeonInfo then
                    local textLabel = dungeonInfo:FindFirstChild("TextLabel")
                    local currentText = textLabel and textLabel.Text or ""

                    -- üìå Khi th·∫•y Dungeon Ends in 20s ‚Üí b·∫Øt ƒë·∫ßu ki·ªÉm tra double dungeon
                    if currentText == "Dungeon Ends in 20s" then
                        isDoubleDungeonCheck = true
                        waitFor12s = false
                    end

                    -- üß† Auto Check DD logic
                    if settings["AutoCheckDD"] and isDoubleDungeonCheck then
                        if currentText == "Dungeon Ends in 13s" then
                            waitFor12s = true
                        elseif waitFor12s and currentText == "Dungeon Ends in 12s" then
                            createAndStartDungeon()
                            waitFor12s = false
                            isDoubleDungeonCheck = false
                            hasDoubleDungeonHappened = true -- ƒë√£ c√≥ double dungeon
                        elseif currentText ~= "Dungeon Ends in 13s" and currentText ~= "Dungeon Ends in 12s" then
                            waitFor12s = false
                        end
                    end

                    -- üõ°Ô∏è Auto Bypass Dungeon logic
                    if settings["AutoBypassDungeon"] then
                        -- 2. Ho·∫∑c AutoCheckDD nh∆∞ng KH√îNG c√≥ double dungeon (ho·∫∑c ƒë√£ qua 1 l·∫ßn ki·ªÉm tra r·ªìi)
                        if (not settings["AutoCheckDD"]) or (settings["AutoCheckDD"] and not isDoubleDungeonCheck and not waitFor12s) then
                            if currentText:match("^Dungeon Ends in %\d+s$") and currentText ~= lastText then
                                createAndStartDungeon()
                                hasDoubleDungeonHappened = false
                            end
                        end
                    end

                    lastText = currentText
                end
            end

            task.wait(0.3)
        end
    end
end)

--  Textbox: Nh·∫≠p s·ªë t·∫ßng ho·∫∑c th√¥ng tin t√πy √Ω
DungeonTab:CreateLabel("Auto castle")

local targetFloor = tonumber(settings["CastleTargetFloor"]) or 30
local checkingCastle = false
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local lobbyPlaceId = 87039211657390

local castleJoinToggle = nil
local castleCheckpointToggle = nil

-- Auto Castle Join (toggle c≈© c·ªßa b·∫°n)
castleJoinToggle = DungeonTab:CreateToggle({
    Name = "Auto Castle Join",
    CurrentValue = settings["AutoCastleCustom"],
    Flag = "AutoCastleCustom",
    Callback = function(val)
        settings["AutoCastleCustom"] = val
        if val and castleCheckpointToggle then
            castleCheckpointToggle:Set(false)
        end
        saveSettings()
    end
})

-- Auto Castle Checkpoint (toggle m·ªõi)
castleCheckpointToggle = DungeonTab:CreateToggle({
    Name = "Auto Castle Checkpoint",
    CurrentValue = settings["AutoCastleCheckpoint"],
    Flag = "AutoCastleCheckpoint",
    Callback = function(val)
        settings["AutoCastleCheckpoint"] = val
        if val and castleJoinToggle then
            castleJoinToggle:Set(false)
        end
        saveSettings()
    end
})

-- ‚úÖ Lu·ªìng ki·ªÉm tra v√† t·ª± ƒë·ªông join castle/checkpoint (li√™n t·ª•c, lu√¥n lu√¥n ch·∫°y)
task.spawn(function()
    while true do
        local minute = os.date("*t").min

        if minute >= 45 and minute <= 58 then
            if settings["AutoCastleCustom"] then
                local args = {
                    [1] = {
                        [1] = { ["Event"] = "JoinCastle" },
                        [2] = "\n"
                    }
                }
                pcall(function()
                    ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
                end)

            elseif settings["AutoCastleCheckpoint"] then
                local args = {
                    [1] = {
                        [1] = { ["Event"] = "JoinCastle", ["Check"] = true },
                        [2] = "\n"
                    }
                }
                pcall(function()
                    ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
                end)
            end
        end
        task.wait(2)
    end
end)

-- Teleport v·ªÅ lobby khi ƒë·∫øn ƒë√∫ng t·∫ßng
task.spawn(function()
    while true do
        if settings["AutoCastleCustom"] then
            if not checkingCastle and targetFloor then
                pcall(function()
                    local roomText = LocalPlayer:WaitForChild("PlayerGui")
                        :WaitForChild("Hud")
                        :WaitForChild("UpContanier")
                        :WaitForChild("Room").Text

                    if typeof(roomText) == "string" and roomText:find("Floor: " .. targetFloor .. "/100") then
                        checkingCastle = true
                        task.wait(1)
                        TeleportService:Teleport(lobbyPlaceId)
                    end
                end)
            end
        end
        task.wait(2)
    end
end)

-- üìå L∆∞u checkpoint dropdown
local selectedCheckpoint = settings["SelectedCheckpoint"] or "Room_25"

-- üì¶ Dropdown ch·ªçn model t·∫ßng ƒë·ªÉ teleport
local teleportDropdown = DungeonTab:CreateDropdown({
	Name = "Teleport Floor",
	Options = { "Room_25", "Room_50", "Room_75", "Room_100" },
	CurrentOption = selectedCheckpoint,
	Flag = "TeleportCheckpoint",
	Callback = function(option)
		selectedCheckpoint = option
		settings["SelectedCheckpoint"] = option
		saveSettings()
	end
})

-- üîÅ T·ª± ƒë·ªông teleport t·ªõi model checkpoint ƒë√£ ch·ªçn khi n√≥ xu·∫•t hi·ªán trong __World
task.spawn(function()
	while true do
		-- ‚úÖ Ch·ªâ khi b·∫≠t AutoCastleCheckpoint th√¨ m·ªõi ch·∫°y
		if settings["AutoCastleCheckpoint"] and selectedCheckpoint then
			local worldFolder = workspace:FindFirstChild("__Main") and workspace.__Main:FindFirstChild("__World")
			if worldFolder then
				local checkpointModel = worldFolder:FindFirstChild(selectedCheckpoint)
				if checkpointModel and checkpointModel:IsA("Model") and checkpointModel.PrimaryPart then
					task.wait(0.5)
					pcall(function()
						local root = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
						if root then
							root.CFrame = checkpointModel:GetPrimaryPartCFrame() + Vector3.new(0, 5, 0)
						end
					end)
					-- ƒê·ª£i 5s tr∆∞·ªõc khi th·ª≠ l·∫°i
					task.wait(5)
				end
			end
		end
		task.wait(1)
	end
end)

-- Textbox: Nh·∫≠p t·∫ßng ƒë·ªÉ teleport v·ªÅ
local castleFloorInput = DungeonTab:CreateInput({
    Name = "Auto Out Floor (fix)",
    PlaceholderText = "100",
    RemoveTextAfterFocusLost = false,
    Default = tostring(settings["CastleTargetFloor"]),
    Callback = function(val)
        local num = tonumber(val)
        if num then
            settings["CastleTargetFloor"] = tostring(num)
            targetFloor = num
            checkingCastle = false
            saveSettings()
        end
    end
})

task.wait(0.1)
castleFloorInput:Set(settings["CastleTargetFloor"])

-- Toggle: Auto Out Khi gi·∫øt boss
DungeonTab:CreateToggle({
    Name = "Auto Out Khi",
    CurrentValue = settings["AutoCastleBossOut"],
    Flag = "AutoCastleBossOut",
    Callback = function(val)
        settings["AutoCastleBossOut"] = val
        saveSettings()
    end
})

-- Input: T·∫ßng c√≥ boss c·∫ßn gi·∫øt r·ªìi out
local bossOutInput = DungeonTab:CreateInput({
    Name = "Kill boss ·ªü t·∫ßng",
    PlaceholderText = "100",
    RemoveTextAfterFocusLost = false,
    Default = tostring(settings["AutoCastleBossFloor"] or ""),
    Callback = function(val)
        local num = tonumber(val)
        if num then
            settings["AutoCastleBossFloor"] = num
            saveSettings()
        end
    end
})

task.delay(0.1, function()
    bossOutInput:Set(tostring(settings["AutoCastleBossFloor"] or ""))
end)

-- Lu·ªìng ki·ªÉm tra boss ch·∫øt ƒë·ªÉ teleport
task.spawn(function()
    local enemiesServer = workspace:WaitForChild("__Main"):WaitForChild("__Enemies"):WaitForChild("Server")

    while true do
        if settings["AutoCastleCustom"] and settings["AutoCastleBossOut"] and tonumber(settings["AutoCastleBossFloor"]) then
            local currentFloor = 0
            local roomText = ""
            pcall(function()
                roomText = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("Hud")
                    :WaitForChild("UpContanier"):WaitForChild("Room").Text
            end)

            local match = roomText:match("Floor: (%d+)/100")
            if match then
                currentFloor = tonumber(match)
            end

            local bossFloor = tonumber(settings["AutoCastleBossFloor"])

            if currentFloor == bossFloor then
                while currentFloor == bossFloor and settings["AutoCastleCustom"] and settings["AutoCastleBossOut"] do
                    local trackedBossParts = {}
                    for _, folder in ipairs(enemiesServer:GetChildren()) do
                        if folder:IsA("Folder") then
                            for _, part in ipairs(folder:GetChildren()) do
                                if part:IsA("Part") and (part:GetAttribute("Scale") or 0) >= 2 then
                                    table.insert(trackedBossParts, part)
                                end
                            end
                        end
                    end

                    local allDead = true
                    for _, part in ipairs(trackedBossParts) do
                        local hp = part:GetAttribute("HP")
                        if hp and hp > 0 then
                            allDead = false
                            break
                        end
                    end

                    if allDead then
                        task.wait(2)
                        TeleportService:Teleport(lobbyPlaceId)
                        break
                    end

                    pcall(function()
                        roomText = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("Hud")
                            :WaitForChild("UpContanier"):WaitForChild("Room").Text
                        local matchNew = roomText:match("Floor: (%d+)/100")
                        if matchNew then
                            currentFloor = tonumber(matchNew)
                        end
                    end)

                    task.wait(1)
                end
            end
        end
        task.wait(1.5)
    end
end)

local autoClicking = false

MiscTab:CreateToggle({
    Name = "AutoClick",
    CurrentValue = settings["AutoClick"],
    Flag = "AutoClick",
    Callback = function(val)
        settings["AutoClick"] = val
        autoClicking = val
        saveSettings()
    end
})

-- Lu·ªìng x·ª≠ l√Ω AutoClick
task.spawn(function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Player = game:GetService("Players").LocalPlayer
    local SharedModules = ReplicatedStorage:WaitForChild("SharedModules")
    local WeaponsModule = require(SharedModules:WaitForChild("WeaponsModule"))

    repeat task.wait(1) until Player:GetAttribute("Loaded") == true

    while true do
        task.wait(0.1)
        if autoClicking then
            if Player.leaderstats:FindFirstChild("Passes") and Player.leaderstats.Passes:GetAttribute("AutoClicker") ~= true then
                task.wait(0.1)
            end

            if Player:GetAttribute("AutoClick") ~= true then
                Player:SetAttribute("AutoClick", true)
            end

            WeaponsModule.Click({
                ["KeyCode"] = Enum.KeyCode.ButtonX
            }, false, nil, true)
        end
    end
end)

local autoAttackEnabled = settings["AutoAttack"]

MiscTab:CreateToggle({
    Name = "Auto Attack",
    CurrentValue = autoAttackEnabled,
    Flag = "AutoAttack",
    Callback = function(val)
        autoAttackEnabled = val
        settings["AutoAttack"] = val
        saveSettings()
    end
})

task.spawn(function()
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local enemies = workspace:WaitForChild("__Main"):WaitForChild("__Enemies"):WaitForChild("Server")
    local dataRemoteEvent = game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")

    -- H√†m t√≠nh kho·∫£ng c√°ch
    local function getDistance(part1, part2)
        return (part1.Position - part2.Position).Magnitude
    end

    while true do
        if autoAttackEnabled then
            local closestEnemy = nil
            local minDistance = math.huge

            -- T√¨m trong map 1‚Äì7
            for mapId = 1, 7 do
                local targetMap = enemies:FindFirstChild(tostring(mapId))
                if targetMap then
                    for _, part in pairs(targetMap:GetChildren()) do
                        if part:IsA("Part") and part.Name ~= "" then
                            local distance = getDistance(rootPart, part)
                            if distance < minDistance then
                                closestEnemy = part.Name
                                minDistance = distance
                            end
                        end
                    end
                end
            end

            -- T√¨m trong Server ch√≠nh
            for _, part in pairs(enemies:GetChildren()) do
                if part:IsA("Part") and part.Name ~= "" then
                    local distance = getDistance(rootPart, part)
                    if distance < minDistance then
                        closestEnemy = part.Name
                        minDistance = distance
                    end
                end
            end

            -- T·∫•n c√¥ng n·∫øu c√≥ k·∫ª ƒë·ªãch
            if closestEnemy then
                local args = {
                    [1] = {
                        [1] = {
                            ["Event"] = "PunchAttack",
                            ["Enemy"] = closestEnemy
                        },
                        [2] = "\4"
                    }
                }
                pcall(function()
                    dataRemoteEvent:FireServer(unpack(args))
                end)
            end
        end

        task.wait(0.1)
    end
end)

MiscTab:CreateToggle({
    Name = "Auto Load Script",
    CurrentValue = settings["AutoLoadScript"],
    Flag = "AutoLoadScript",
    Callback = function(val)
        settings["AutoLoadScript"] = val
        saveSettings()

        if val then
            queue_on_teleport([[
                loadstring(game:HttpGet('https://raw.githubusercontent.com/skyemngu13/hee/refs/heads/main/Mainv2'))()
            ]])
        end
    end
})

MiscTab:CreateToggle({
    Name = "No Cooldown",
    CurrentValue = settings["BypassCooldown"],
    Flag = "BypassCooldown",
    Callback = function(val)
        settings["BypassCooldown"] = val
        saveSettings()

        if val then
            task.spawn(function()
                local replicated = game:GetService("ReplicatedStorage")
                local success, module = pcall(function()
                    return require(replicated:WaitForChild("SharedModules"):WaitForChild("CooldownModule"))
                end)

                if success and module then
                    module.Verify = function(...) return true end
                    module.VerifyPower = function(...) return true end
                    module.VerifyNpc = function(...) return true end
                    module.VerifyPlayer = function(...) return true end
                    module.VerifyPowerPlayer = function(...) return true end
                end
            end)
        end
    end
})

MiscTab:CreateToggle({
    Name = "Gi·∫£m lag",
    CurrentValue = settings["SpecialScript"],
    Flag = "SpecialScript",
    Callback = function(val)
        settings["SpecialScript"] = val
        saveSettings()

        if val then
            task.spawn(function()
                pcall(function()
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/skyemngu13/hee/refs/heads/main/giamlag"))()
                end)
            end)
        end
    end
})

ShopTab:CreateLabel("ƒê·ªïi DUST")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local remote = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")

local exchangeOptions = {
    ["10 rare = 1 legend"] = "EnchLegendary",
    ["1 legend = 1 rare"] = "EnchRare2",
    ["10 common = 1 rare"] = "EnchRare"
}

local selectedExchange = "EnchLegendary"
local isExchanging = false

-- Dropdown ·ªü ShopTab
ShopTab:CreateDropdown({
    Name = "Lo·∫°i ƒë·ªïi Enchant (fix)",
    Options = {"10 rare = 1 legend", "1 legend = 1 rare", "10 common = 1 rare"},
    CurrentOption = "10 rare = 1 legend",
    Flag = "EnchantType",
    Callback = function(option)
        if typeof(option) == "table" then
            option = option[1]
        end
        selectedExchange = exchangeOptions[option]
    end
})

-- Toggle ·ªü ShopTab
ShopTab:CreateToggle({
    Name = "Auto Exchange Enchant",
    CurrentValue = false,
    Flag = "AutoExchangeEnchant",
    Callback = function(val)
        isExchanging = val
        if val then
            -- M·ªü GUI
            local openGUIArgs = {
                [1] = {
                    [1] = {
                        ["Shop"] = "ExchangeShop",
                        ["Event"] = "OpenShop"
                    },
                    [2] = "\n"
                }
            }
            remote:FireServer(unpack(openGUIArgs))
        else
            -- ƒê√≥ng GUI
            local closeGUIArgs = {
                [1] = {
                    [1] = {
                        ["Event"] = "CloseShop"
                    },
                    [2] = "\n"
                }
            }
            remote:FireServer(unpack(closeGUIArgs))
        end
    end
})

-- V√≤ng l·∫∑p th·ª±c hi·ªán ƒë·ªïi
task.spawn(function()
    while true do
        if isExchanging and selectedExchange then
            local args = {
                [1] = {
                    [1] = {
                        ["Action"] = "Buy",
                        ["Shop"] = "ExchangeShop",
                        ["Item"] = selectedExchange,
                        ["Event"] = "ItemShopAction"
                    },
                    [2] = "\n"
                }
            }
            pcall(function()
                remote:FireServer(unpack(args))
            end)
        end
        task.wait(0.5)
    end
end)

local teleportData = {
    {Name = "Solo lvl", Position = CFrame.new(577.968262, 27.9623756, 261.452271)},
    {Name = "Naruto", Position = CFrame.new(-3380.2373, 29.8265285, 2257.26196)},
    {Name = "One piece", Position = CFrame.new(-2851.1062, 49.8987885, -2011.39526)},
    {Name = "Bleach", Position = CFrame.new(2641.79517, 45.9265289, -2645.07568)},
    {Name = "Black clover", Position = CFrame.new(198.338684, 39.2076797, 4296.10938)},
    {Name = "Chain sawn man", Position = CFrame.new(236.932678, 33.3960934, -4301.60547)},
    {Name = "JoJo", Position = CFrame.new(4816.31641, 30.4423409, -120.22998)},
    {Name = "DB", Position = CFrame.new(-6295.89209, 24.6981049, -73.7149353, 0, 0, 1, 0, 1, -0, -1, 0, 0)},
    {Name = "GuildHall", Position = CFrame.new(289.015015, 31.8532162, 157.246201, 1, 0, 0, 0, 1, 0, 0, 0, 1)},
}

for _, data in ipairs(teleportData) do
    TeleportTab:CreateButton({
        Name = data.Name,
        Callback = function()
            local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.Anchored = true
                hrp.CFrame = data.Position

                Rayfield:Notify({
                    Title = "Teleported!",
                    Content = "ƒê√£ d·ªãch chuy·ªÉn ƒë·∫øn " .. data.Name,
                    Duration = 3,
                    Image = "rbxassetid://126309628188296"
                })

                task.delay(1, function()
                    if hrp then hrp.Anchored = false end
                end)
            end
        end
    })
end

local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

-- X√≥a GUI c≈© n·∫øu ƒë√£ t·ªìn t·∫°i
local old = game:GetService("CoreGui"):FindFirstChild("FPSPingDisplay")
if old then
	old:Destroy()
end

-- T·∫°o GUI m·ªõi
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FPSPingDisplay"
screenGui.IgnoreGuiInset = true
screenGui.ResetOnSpawn = false
screenGui.DisplayOrder = 999999
screenGui.Enabled = true

pcall(function()
	screenGui.Parent = game:GetService("CoreGui")
end)

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 240, 0, 100)
mainFrame.Position = UDim2.new(0, 10, 0, 10)
mainFrame.BackgroundTransparency = 1
mainFrame.Parent = screenGui

-- T·∫°o d√≤ng text
local function createRow(y)
	local row = Instance.new("Frame")
	row.Size = UDim2.new(1, 0, 0, 30)
	row.Position = UDim2.new(0, 0, 0, y)
	row.BackgroundTransparency = 1
	row.Parent = mainFrame

	local layout = Instance.new("UIListLayout")
	layout.FillDirection = Enum.FillDirection.Horizontal
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 4)
	layout.Parent = row

	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(0, 50, 1, 0)
	label.BackgroundTransparency = 1
	label.Font = Enum.Font.SourceSansBold
	label.TextSize = 24
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.TextStrokeTransparency = 0.5
	label.Parent = row

	local value = label:Clone()
	value.Size = UDim2.new(1, -50, 1, 0)
	value.Parent = row

	return label, value
end

local fpsLabel, fpsValue = createRow(0)
local pingLabel, pingValue = createRow(30)
local timeLabel, timeValue = createRow(60)

fpsLabel.Text = "FPS:"
pingLabel.Text = "Ping:"
timeLabel.Text = "Time:"

-- Hi·ªáu ·ª©ng rainbow
local function rainbow(offset)
	local t = tick()
	local r = 0.5 + 0.5 * math.sin(t * 3 + offset)
	local g = 0.5 + 0.5 * math.sin(t * 3 + offset + 2)
	local b = 0.5 + 0.5 * math.sin(t * 3 + offset + 4)
	return Color3.new(r, g, b)
end

-- Lu·ªìng ri√™ng ƒë·ªÉ update UI
task.spawn(function()
	local fps, count, last = 0, 0, tick()

	RunService.RenderStepped:Connect(function()
		if not screenGui.Enabled then return end

		count = count + 1
		local now = tick()

		if now - last >= 1 then
			fps = count
			count = 0
			last = now

			local pingStat = Stats:FindFirstChild("Network") and Stats.Network:FindFirstChild("ServerStatsItem")
			local ping = pingStat and pingStat["Data Ping"]:GetValue() or 0
			pingValue.Text = math.floor(ping + 0.5) .. " ms"
			fpsValue.Text = tostring(fps)
		end

		local t = os.date("*t")
		timeValue.Text = string.format("%02d:%02d:%02d", t.hour, t.min, t.sec)

		-- Rainbow m√†u
		fpsLabel.TextColor3 = rainbow(0)
		fpsValue.TextColor3 = rainbow(1)
		pingLabel.TextColor3 = rainbow(2)
		pingValue.TextColor3 = rainbow(3)
		timeLabel.TextColor3 = rainbow(4)
		timeValue.TextColor3 = rainbow(5)
	end)
end)

task.spawn(function()
    task.wait(1) -- ƒê·∫£m b·∫£o UI ƒë√£ v·∫Ω xong

    -- B·∫≠t l·∫°i c√°c toggle ƒë√£ l∆∞u tr·∫°ng th√°i trong settings
task.spawn(function()
    task.wait(1) -- ƒê·ª£i UI v·∫Ω xong

    local function reTrigger(flag)
        local toggle = Rayfield.Flags[flag]
        if toggle and settings[flag] then
            toggle:Set(false)
            task.wait(0.05)
            toggle:Set(true)
        end
    end

    -- C√°c flag toggle c·∫ßn kh·ªüi ƒë·ªông l·∫°i
    local allFlags = {
        "AutoClick",
        "AutoAttack",
        "AutoLoadScript",
        "SpecialScript",
        "BypassCooldown",
        "AutoCastleCustom",
        "AutoCheckDD",
        "AutoCastleBossOut",
        "AutoCastleBossFloor",
    }

    for _, flag in ipairs(allFlags) do
        reTrigger(flag)
    end
end)

    -- N·∫øu b·∫≠t BypassCooldown th√¨ patch l·∫°i module (v√¨ kh√¥ng th·ªÉ rely ho√†n to√†n v√†o toggle)
    if settings["BypassCooldown"] then
        task.spawn(function()
            local replicated = game:GetService("ReplicatedStorage")
            local success, module = pcall(function()
                return require(replicated:WaitForChild("SharedModules"):WaitForChild("CooldownModule"))
            end)
            if success and module then
                module.Verify = function(...) return true end
                module.VerifyPower = function(...) return true end
                module.VerifyNpc = function(...) return true end
                module.VerifyPlayer = function(...) return true end
                module.VerifyPowerPlayer = function(...) return true end
            end
        end)
    end
end)

local UIS = game:GetService("UserInputService")

-- T·∫°o ScreenGui
local gui = Instance.new("ScreenGui")
gui.Name = "ImageButtonGUI"
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
pcall(function()
	gui.Parent = game:GetService("CoreGui")
end)

-- T·∫°o ImageButton
local btn = Instance.new("ImageButton")
btn.Name = "KButton"
btn.Size = UDim2.new(0, 40, 0, 40)
btn.Position = UDim2.new(1, -40, 0.30, -25) -- üîº D·ªãch l√™n cao h∆°n
btn.BackgroundTransparency = 1
btn.Image = "rbxassetid://126309628188296"
btn.Parent = gui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(1, 0)
corner.Parent = btn

-- Khi click, gi·∫£ l·∫≠p ph√≠m K
btn.MouseButton1Click:Connect(function()
	local vu = game:GetService("VirtualInputManager")
	vu:SendKeyEvent(true, Enum.KeyCode.K, false, game)
	vu:SendKeyEvent(false, Enum.KeyCode.K, false, game)
end)

-- Anti-AFK Script (Auto Execute Version)
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    vu:CaptureController()
    vu:ClickButton2(Vector2.new(0, 0))
end)
