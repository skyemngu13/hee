local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
local enemies = workspace.__Main.__Enemies.Server

local speed = 1000
local isBusy = false

local function findNearestMob()
    local nearest, minDist = nil, math.huge
    for _, mob in pairs(enemies:GetChildren()) do
        local hp = mob:GetAttribute("HP")
        if hp and hp > 0 then
            local dist = (mob.Position - rootPart.Position).Magnitude
            if dist < minDist then
                minDist, nearest = dist, mob
            end
        end
    end
    return nearest
end

local function punchMob(uuid)
    local args = {
        [1] = {
            [1] = {
                ["Event"] = "PunchAttack",
                ["Enemy"] = uuid
            },
            [2] = "\4"
        }
    }
    ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
end

local function destroyMob(uuid)
    for i = 1, 5 do
        ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer({
            [1] = {
                [1] = {
                    ["Event"] = "EnemyDestroy",
                    ["Enemy"] = uuid
                },
                [2] = "\4"
            }
        })
        task.wait(0.2)
    end
end

local function ariseMob(uuid)
    for i = 1, 5 do
        ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer({
            [1] = {
                [1] = {
                    ["Event"] = "EnemyCapture",
                    ["Enemy"] = uuid
                },
                [2] = "\4"
            }
        })
        task.wait(0.2)
    end
end

local function moveToAndPunch(mob)
    if not mob or not mob:IsDescendantOf(workspace) then return end
    isBusy = true

    local uuid = mob:GetAttribute("UUID") or mob.Name
    local distance = (mob.Position - rootPart.Position).Magnitude
    local tweenTime = distance / speed

    local finished = false
    local tween = TweenService:Create(rootPart, TweenInfo.new(tweenTime, Enum.EasingStyle.Linear), {CFrame = mob.CFrame})
    tween.Completed:Connect(function()
        finished = true
    end)
    tween:Play()

    -- Timeout để tránh treo vĩnh viễn
    local timeout = 3
    local elapsed = 0
    while not finished and elapsed < timeout do
        if not mob or not mob.Parent then break end
        elapsed += task.wait()
    end

    tween:Cancel()
    task.wait(0.4)

    -- Đảm bảo chỉ có 1 Heartbeat
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not mob or not mob.Parent then
            connection:Disconnect()
            connection = nil
            isBusy = false
            return
        end

        local hp = mob:GetAttribute("HP")
        if not hp or hp <= 0 then
            connection:Disconnect()
            connection = nil
            if mob:GetAttribute("Model") == "JinWoo" or mob:GetAttribute("Model") == "Pucci" or mob:GetAttribute("Model") == "Denji" then
                ariseMob(uuid)
            else
                destroyMob(uuid)
            end
            isBusy = false
            return
        end

        punchMob(uuid)
        task.wait(0.5)
    end)
end

-- Chạy luồng chính, chờ xử lý xong rồi mới xử lý mob tiếp theo
task.spawn(function()
    while task.wait(0.2) do
        if not isBusy then
            local mob = findNearestMob()
            if mob then
                moveToAndPunch(mob)
            end
        end
    end
end)
