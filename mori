local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")
local enemies = workspace.__Main.__Enemies.Server

local mapId = "7"
local targetMap = enemies:FindFirstChild(mapId)
if not targetMap then return end

local speed = 1000
local tween = nil
local isBusy = false

local function findNearestMob()
    local nearest, minDist = nil, math.huge
    for _, mob in pairs(targetMap:GetChildren()) do
        local hp = mob:GetAttribute("HP")
        local scale = mob:GetAttribute("Scale")
        if hp and hp > 0 and scale == 2 then
            local dist = (mob.Position - rootPart.Position).Magnitude
            if dist < minDist then
                minDist, nearest = dist, mob
            end
        end
    end
    return nearest
end

local function destroyMob(uuid)
    for _ = 1, 5 do
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "EnemyDestroy",
                    ["Enemy"] = uuid
                },
                [2] = "\4"
            }
        }
        ReplicatedStorage.BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
    end
end

local function moveToMob(mob)
    if not mob or not mob.Parent then 
        isBusy = false 
        return 
    end

    local uuid = mob:GetAttribute("UUID") or mob.Name
    local hp = mob:GetAttribute("HP")
    local scale = mob:GetAttribute("Scale")
    if not hp or hp <= 0 or scale ~= 2 then 
        isBusy = false 
        return 
    end

    isBusy = true
    if tween then tween:Cancel() end

    local offset = (mob.Position - rootPart.Position).Unit * -4
    local targetPosition = mob.Position + offset + Vector3.new(0, 3, 0)
    local distance = (targetPosition - rootPart.Position).Magnitude
    local tweenTime = math.max(distance / speed, 0.1)

    tween = TweenService:Create(rootPart, TweenInfo.new(tweenTime, Enum.EasingStyle.Linear), {
        CFrame = CFrame.new(targetPosition, mob.Position)
    })
    tween:Play()

    tween.Completed:Connect(function()
        if not mob or not mob.Parent then
            isBusy = false
            return
        end

        local currentHP = mob:GetAttribute("HP")
        if currentHP and currentHP > 0 then
            local waitConnection
            waitConnection = RunService.Heartbeat:Connect(function()
                local hp = mob:GetAttribute("HP")
                if not hp or hp <= 0 then
                    waitConnection:Disconnect()
                    destroyMob(uuid)

                    local nextMob = findNearestMob()
                    if nextMob then
                        moveToMob(nextMob)
                    else
                        isBusy = false
                    end
                end
            end)
        else
            destroyMob(uuid)
            local nextMob = findNearestMob()
            if nextMob then
                moveToMob(nextMob)
            else
                isBusy = false
            end
        end
    end)
end

while true do
    task.wait(0.3)
    if not isBusy then
        local mob = findNearestMob()
        if mob then
            moveToMob(mob)
        end
    end
end
