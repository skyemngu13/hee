local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local enemiesRoot = Workspace:WaitForChild("__Main"):WaitForChild("__Enemies")
local enemiesServer = enemiesRoot:WaitForChild("Server")
local enemiesClient = enemiesRoot:WaitForChild("Client")

local remote = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")

-- Danh sách model ưu tiên Arise
local ariseModels = {
    Jinwoo = true,
    Pucci = true,
    Freeza = true
}

-- Hàm lấy mob gần nhất từ Server, đồng thời tìm Model trong Client
local function getNearestMob()
    local nearestPart, nearestModel, minDist = nil, nil, math.huge

    local function check(uuidPart)
        local uuid = uuidPart.Name
        local hp = uuidPart:GetAttribute("HP")
        local scale = uuidPart:GetAttribute("Scale")

        -- Bỏ qua nếu mob chưa chết
        if not hp or hp > 0 then return end

        local model = enemiesClient:FindFirstChild(uuid, true)
        if model and model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") then
            local dist = (model.HumanoidRootPart.Position - hrp.Position).Magnitude
            if dist < minDist then
                minDist = dist
                nearestPart = uuidPart
                nearestModel = model
            end
        end
    end

    -- Duyệt tất cả Folder trong Server
    for _, child in pairs(enemiesServer:GetChildren()) do
        if child:IsA("Folder") then
            for _, uuidPart in pairs(child:GetChildren()) do
                if uuidPart:IsA("Part") then
                    check(uuidPart)
                end
            end
        elseif child:IsA("Part") then
            check(child)
        end
    end

    return nearestPart, nearestModel
end

-- Xử lý Arise hoặc Destroy dựa trên thông tin từ Server
local function handleMob()
    local part, model = getNearestMob()
    if not part or not model then return end

    local uuid = part.Name
    local scale = part:GetAttribute("Scale")
    local modelName = part:GetAttribute("Model")

    local eventType = "EnemyDestroy"
    if ariseModels[modelName] and scale and scale >= 2 then
        eventType = "EnemyCapture"
    end

    for i = 1, 4 do
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = eventType,
                    ["Enemy"] = uuid
                },
                [2] = "\4"
            }
        }
        remote:FireServer(unpack(args))
        task.wait(0.2)
    end
end

-- Main loop
while task.wait(0.1) do
    pcall(handleMob)
end
